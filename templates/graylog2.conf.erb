# FILE IS MANGAED BY PUPPET MANUAL CHANGES WILL BE OVERWRITTEN
#
#        .-"-.            .-"-.            .-"-.
#      _/_-.-_\_        _/.-.-.\_        _/.-.-.\_
#     / __} {__ \      /|( o o )|\      ( ( o o ) )
#    / //  "  \\ \    | //  "  \\ |      |/  "  \|
#   / / \'---'/ \ \  / / \'---'/ \ \      \'/^\'/
#   \ \_/`"""`\_/ /  \ \_/`"""`\_/ /      /`\ /`\
#    \           /    \           /      /  /|\  \
#
# FILE IS MANGAED BY PUPPET MANUAL CHANGES WILL BE OVERWRITTEN

# If you are running more than one instances of graylog2-server you have to select one of these
# instances as master. The master will perform some periodical tasks that non-masters won't perform.
is_master = <%= scope.lookupvar('graylog2server::is_master') %>

# The auto-generated node ID will be stored in this file and read after restarts. It is a good idea
# to use an absolute file path here if you are starting graylog2-server from init scripts or similar.
node_id_file = <%= scope.lookupvar('graylog2server::serverpath') %>/graylog2-server-node-id

# You MUST set a secret to secure/pepper the stored user passwords here. Use at least 64 characters.
# Generate one by using for example: pwgen -s 96
password_secret = <%= scope.lookupvar('graylog2server::password_secret') %>

# the default root user is named 'admin'
root_username = <%= scope.lookupvar('graylog2server::root_user') %>
# You MUST specify a hash password for the root user (which you only need to initially set up the
# system and in case you lose connectivity to your authentication backend)
# Create one by using for example: echo -n yourpassword | shasum -a 256
# and put the resulting hash value into the following line
root_password_sha2 = <%= scope.lookupvar('graylog2server::root_password_sha2') %>

# Set plugin directory here (relative or absolute)
plugin_dir = <%= scope.lookupvar('graylog2server::plugin_dir') %>

# REST API listen URI. Must be reachable by other graylog2-server nodes if you run a cluster.
rest_listen_uri = <%= scope.lookupvar('graylog2server::rest_listen_uri') %>

# REST API transport address. Defaults to first non-loopback IPv4 system address and port 12900.
# This will be promoted in the cluster discovery APIs and other nodes may try to connect on this
# address. (see rest_listen_uri)
rest_transport_uri = <%= scope.lookupvar('graylog2server::rest_transport_uri') %>

# Embedded elasticsearch configuration file
# pay attention to the working directory of the server, maybe use an absolute path here

elasticsearch_config_file = <%= scope.lookupvar('graylog2server::elasticsearch_config_file') %>
elasticsearch_max_docs_per_index = <%= scope.lookupvar('graylog2server::elasticsearch_max_docs_per_index')%>

# How many indices do you want to keep?
# elasticsearch_max_number_of_indices*elasticsearch_max_docs_per_index=total number of messages in your setup
elasticsearch_max_number_of_indices = <%= scope.lookupvar('graylog2server::elasticsearch_max_number_of_indices') %>

# Decide what happens with the oldest indices when the maximum number of indices is reached.
# The following strategies are availble:
#   - delete # Deletes the index completely (Default)
#   - close # Closes the index and hides it from the system. Can be re-opened later.
retention_strategy = <%= scope.lookupvar('graylog2server::retention_stragey') %>

# How many ElasticSearch shards and replicas should be used per index? Note that this only applies to newly created indices.
elasticsearch_shards = <%= scope.lookupvar('graylog2server::elasticsearch_shards') %>
elasticsearch_replicas = <%= scope.lookupvar('graylog2server::elasticsearch_replicas') %>

elasticsearch_index_prefix = <%= scope.lookupvar('graylog2server::elasticsearch_index_prefix') %> graylog2

# Do you want to allow searches with leading wildcards? This can be extremely resource hungry and should only
# be enabled with care. See also: http://support.torch.sh/help/kb/graylog2-web-interface/the-search-bar-explained
allow_leading_wildcard_searches = <%= scope.lookupvar('graylog2server::allow_leading_wildcard_searches') %>

# settings to be passed to elasticsearch's client (overriding those in the provided elasticsearch_config_file)
# all these
# this must be the same as for your elasticsearch cluster
elasticsearch_cluster_name = <%= scope.lookupvar('graylog2server::elasticsearch_cluster_name') %>

# you could also leave this out, but makes it easier to identify the graylog2 client instance
elasticsearch_node_name = <%= scope.lookupvar('graylog2server::elasticsearch_node_name') %>

# we don't want the graylog2 server to store any data, or be master node
elasticsearch_node_master = <%= scope.lookupvar('graylog2server::elasticsearch_node_master') %>
elasticsearch_node_data = <%= scope.lookupvar('graylog2server::elasticsearch_node_data') %>

# use a different port if you run multiple elasticsearch nodes on one machine
elasticsearch_transport_tcp_port = <%= scope.lookupvar('graylog2server::elasticsearch_transport_tcp_port') %>
# we don't need to run the embedded HTTP server here
elasticsearch_http_enabled = <%= scope.lookupvar('graylog2server::elasticsearch_http_enabled') %>
elasticsearch_discovery_zen_ping_multicast_enabled = <%= scope.lookupvar('graylog2server::elasticsearch_discovery_zen_ping_multicast_enabled') %>
elasticsearch_discovery_zen_ping_unicast_hosts = <%= scope.lookupvar('graylog2server::elasticsearch_discovery_zen_ping_unicast_hosts') %> 


# Analyzer (tokenizer) to use for message and full_message field. The "standard" filter usually is a good idea.
# All supported analyzers are: standard, simple, whitespace, stop, keyword, pattern, language, snowball, custom
# ElasticSearch documentation: http://www.elasticsearch.org/guide/reference/index-modules/analysis/
# Note that this setting only takes effect on newly created indices.
elasticsearch_analyzer = <%= scope.lookupvar('graylog2server::elasticsearch_analyzer') %>

# Batch size for all outputs. This is the maximum (!) number of messages an output module will get at once.
# For example, if this is set to 5000 (default), the ElasticSearch Output will not index more than 5000 messages
# at once. After that index operation is performed, the next batch will be indexed. If there is only 1 message
# waiting, it will only index that single message. It is important to raise this parameter if you send in so
# many messages that it is not enough to index 5000 messages at once. (Only at *really* high message rates)
output_batch_size = <%= scope.lookupvar('graylog2server::output_batch_size') %>

# The number of parallel running processors.
# Raise this number if your buffers are filling up.
processbuffer_processors = <%= scope.lookupvar('graylog2server::processbuffer_processors') %>
outputbuffer_processors = <%= scope.lookupvar('graylog2server::outputbuffer_processors') %>

# Wait strategy describing how buffer processors wait on a cursor sequence. (default: sleeping)
# Possible types:
#  - yielding
#     Compromise between performance and CPU usage.
#  - sleeping
#     Compromise between performance and CPU usage. Latency spikes can occur after quiet periods.
#  - blocking
#     High throughput, low latency, higher CPU usage.
#  - busy_spinning
#     Avoids syscalls which could introduce latency jitter. Best when threads can be bound to specific CPU cores.
processor_wait_strategy = <%= scope.lookupvar('graylog2server::processor_wait_strategy') %>

# Size of internal ring buffers. Raise this if raising outputbuffer_processors does not help anymore.
# For optimum performance your LogMessage objects in the ring buffer should fit in your CPU L3 cache.
# Start server with --statistics flag to see buffer utilization.
# Must be a power of 2. (512, 1024, 2048, ...)
ring_size = <% scope.lookupvar('graylog2server::ring_size') %>

# MongoDB Configuration
mongodb_host = <%= scope.lookupvar('graylog2server::mongodb_host') %>
mongodb_port = <%= scope.lookupvar('graylog2server::mongodb_port') %>
mongodb_database = <%= scope.lookupvar('graylog2server::mongodb_database') %>
mongodb_useauth = <%= scope.lookupvar('graylog2server::mongodb_useauth') %>
<% if scope.lookupvar('graylog2server::mongodb_useauth') == 'true' %>
mongodb_user = <%= scope.lookupvar('graylog2server::mongodb_user') %>
mongodb_password = <%= scope.lookupvar('graylog2server::mongodb_password') %>
<% end %>
<% if scope.lookupvar('graylog2server::mongodb_replica_set') != 'false' %>
mongodb_replica_set = <%= scope.lookupvar('graylog2server::mongodb_replica_set') %>
<% end %>

# Raise this according to the maximum connections your MongoDB server can handle if you encounter MongoDB connection problems.
mongodb_max_connections = <%= scope.lookupvar('graylog2server::mongodb_max_connections') %>

# Number of threads allowed to be blocked by MongoDB connections multiplier. Default: 5
# If mongodb_max_connections is 100, and mongodb_threads_allowed_to_block_multiplier is 5, then 500 threads can block. More than that and an exception will be thrown.
# http://api.mongodb.org/java/current/com/mongodb/MongoOptions.html#threadsAllowedToBlockForConnectionMultiplier
mongodb_threads_allowed_to_block_multiplier = <%= scope.lookupvar('graylog2server::mongodb_threads_allowed_to_block_multiplier') %>
<% if scope.lookupvar('graylog2server::rules_file') != 'false' %>
# Drools Rule File (Use to rewrite incoming log messages)
# See: http://support.torch.sh/help/kb/graylog2-server/custom-message-rewritingprocessing
rules_file = <%= scope.lookupvar('graylog2server::rules_file') %>
<% end %>

# Email transport
transport_email_enabled = <%= scope.lookupvar('graylog2server::email_enabled') %>
<% if scope.lookupvar('graylog2server::email_enabled') == 'true' %>
transport_email_hostname = <%= scope.lookupvar('graylog2server::email_hostname') %>
transport_email_port = <%= scope.lookupvar('graylog2server::email_port') %>
transport_email_use_auth = <%= scope.lookupvar('graylog2server::email_use_auth') %>
transport_email_use_tls = <%= scope.lookupvar('graylog2server::use_tls') %>
transport_email_use_ssl = <%= scope.lookupvar('graylog2server::use_ssl') %>
<% if scope.lookupvar('graylog2server::email_use_auth') == 'true' %>
transport_email_auth_username = <%= scope.lookupvar('graylog2server::email_auth_username') %>
transport_email_auth_password = <%= scope.lookupvar('graylog2server::email_auth_password') %>
<% end %>
transport_email_subject_prefix = <%= scope.lookupvar('graylog2server::email_subject_prefix') %>
transport_email_from_email = <%= scope.lookupvar('graylog2server::email_from_email') %>
<% end %>